/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIST_H
#define _MOCK_LIST_H

#include "List.h"
#include "CException.h"

void mock_List_Init(void);
void mock_List_Destroy(void);
void mock_List_Verify(void);




#define ListNew_IgnoreAndReturn(cmock_retval) ListNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ListNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, List* cmock_to_return);
#define ListNew_ExpectAndReturn(length, cmock_retval) ListNew_CMockExpectAndReturn(__LINE__, length, cmock_retval)
void ListNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int length, List* cmock_to_return);
typedef List* (* CMOCK_ListNew_CALLBACK)(int length, int cmock_num_calls);
void ListNew_StubWithCallback(CMOCK_ListNew_CALLBACK Callback);
#define ListNew_ExpectAndThrow(length, cmock_to_throw) ListNew_CMockExpectAndThrow(__LINE__, length, cmock_to_throw)
void ListNew_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int length, CEXCEPTION_T cmock_to_throw);
#define listAdd_Ignore() listAdd_CMockIgnore()
void listAdd_CMockIgnore(void);
#define listAdd_Expect(list, data) listAdd_CMockExpect(__LINE__, list, data)
void listAdd_CMockExpect(UNITY_LINE_TYPE cmock_line, List* list, int data);
typedef void (* CMOCK_listAdd_CALLBACK)(List* list, int data, int cmock_num_calls);
void listAdd_StubWithCallback(CMOCK_listAdd_CALLBACK Callback);
#define listAdd_ExpectAndThrow(list, data, cmock_to_throw) listAdd_CMockExpectAndThrow(__LINE__, list, data, cmock_to_throw)
void listAdd_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, List* list, int data, CEXCEPTION_T cmock_to_throw);
#define ListDel_Ignore() ListDel_CMockIgnore()
void ListDel_CMockIgnore(void);
#define ListDel_Expect(list) ListDel_CMockExpect(__LINE__, list)
void ListDel_CMockExpect(UNITY_LINE_TYPE cmock_line, List* list);
typedef void (* CMOCK_ListDel_CALLBACK)(List* list, int cmock_num_calls);
void ListDel_StubWithCallback(CMOCK_ListDel_CALLBACK Callback);
#define ListDel_ExpectAndThrow(list, cmock_to_throw) ListDel_CMockExpectAndThrow(__LINE__, list, cmock_to_throw)
void ListDel_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, List* list, CEXCEPTION_T cmock_to_throw);
#define listRemove_IgnoreAndReturn(cmock_retval) listRemove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listRemove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define listRemove_ExpectAndReturn(list, cmock_retval) listRemove_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void listRemove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List* list, int cmock_to_return);
typedef int (* CMOCK_listRemove_CALLBACK)(List* list, int cmock_num_calls);
void listRemove_StubWithCallback(CMOCK_listRemove_CALLBACK Callback);
#define listRemove_ExpectAndThrow(list, cmock_to_throw) listRemove_CMockExpectAndThrow(__LINE__, list, cmock_to_throw)
void listRemove_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, List* list, CEXCEPTION_T cmock_to_throw);
#define listIsEmpty_IgnoreAndReturn(cmock_retval) listIsEmpty_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listIsEmpty_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define listIsEmpty_ExpectAndReturn(list, cmock_retval) listIsEmpty_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void listIsEmpty_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List* list, int cmock_to_return);
typedef int (* CMOCK_listIsEmpty_CALLBACK)(List* list, int cmock_num_calls);
void listIsEmpty_StubWithCallback(CMOCK_listIsEmpty_CALLBACK Callback);
#define listIsEmpty_ExpectAndThrow(list, cmock_to_throw) listIsEmpty_CMockExpectAndThrow(__LINE__, list, cmock_to_throw)
void listIsEmpty_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, List* list, CEXCEPTION_T cmock_to_throw);
#define listIsFull_IgnoreAndReturn(cmock_retval) listIsFull_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void listIsFull_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define listIsFull_ExpectAndReturn(list, cmock_retval) listIsFull_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void listIsFull_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, List* list, int cmock_to_return);
typedef int (* CMOCK_listIsFull_CALLBACK)(List* list, int cmock_num_calls);
void listIsFull_StubWithCallback(CMOCK_listIsFull_CALLBACK Callback);
#define listIsFull_ExpectAndThrow(list, cmock_to_throw) listIsFull_CMockExpectAndThrow(__LINE__, list, cmock_to_throw)
void listIsFull_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, List* list, CEXCEPTION_T cmock_to_throw);

#endif
